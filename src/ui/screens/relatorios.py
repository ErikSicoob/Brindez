"""
Tela de Relat√≥rios
"""

import customtkinter as ctk
from .base_screen import BaseScreen

class RelatoriosScreen(BaseScreen):
    """Tela de relat√≥rios"""
    
    def __init__(self, parent):
        """Inicializa a tela de relat√≥rios"""
        super().__init__(parent, "Relat√≥rios")
        self.setup_ui()
    
    def setup_ui(self):
        """Configura a interface de relat√≥rios"""
        # T√≠tulo da tela
        self.create_title("üìà Relat√≥rios", "Gera√ß√£o e visualiza√ß√£o de relat√≥rios")
        
        # Se√ß√£o de tipos de relat√≥rios
        self.create_report_types_section()
        
        # Se√ß√£o de relat√≥rios recentes
        self.create_recent_reports_section()
    
    def create_report_types_section(self):
        """Cria a se√ß√£o de tipos de relat√≥rios"""
        section_frame, content_frame = self.create_section("üìä Tipos de Relat√≥rios")
        
        # Grid para os cards de relat√≥rios
        reports_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        reports_frame.pack(fill="x")
        reports_frame.grid_columnconfigure((0, 1, 2), weight=1)
        
        # Relat√≥rios dispon√≠veis
        reports = [
            {
                "title": "üì¶ Estoque Atual",
                "description": "Relat√≥rio completo do estoque atual por filial",
                "icon": "üì¶",
                "action": self.generate_stock_report
            },
            {
                "title": "üìà Movimenta√ß√µes",
                "description": "Hist√≥rico de movimenta√ß√µes por per√≠odo",
                "icon": "üìà",
                "action": self.generate_movements_report
            },
            {
                "title": "üîÑ Transfer√™ncias",
                "description": "Relat√≥rio de transfer√™ncias entre filiais",
                "icon": "üîÑ",
                "action": self.generate_transfers_report
            },
            {
                "title": "‚ö†Ô∏è Estoque Baixo",
                "description": "Itens que precisam de reposi√ß√£o",
                "icon": "‚ö†Ô∏è",
                "action": self.generate_low_stock_report
            },
            {
                "title": "üí∞ Valor de Estoque",
                "description": "Valor financeiro do estoque por categoria",
                "icon": "üí∞",
                "action": self.generate_value_report
            },
            {
                "title": "üë• Usu√°rios",
                "description": "Relat√≥rio de usu√°rios ativos/inativos",
                "icon": "üë•",
                "action": self.generate_users_report
            }
        ]
        
        # Criar cards de relat√≥rios
        for i, report in enumerate(reports):
            row = i // 3
            col = i % 3
            
            card = ctk.CTkFrame(reports_frame)
            card.grid(row=row, column=col, padx=10, pady=10, sticky="ew")
            
            # √çcone
            icon_label = ctk.CTkLabel(
                card,
                text=report["icon"],
                font=ctk.CTkFont(size=24)
            )
            icon_label.pack(pady=(15, 5))
            
            # T√≠tulo
            title_label = ctk.CTkLabel(
                card,
                text=report["title"],
                font=ctk.CTkFont(size=14, weight="bold")
            )
            title_label.pack(pady=5)
            
            # Descri√ß√£o
            desc_label = ctk.CTkLabel(
                card,
                text=report["description"],
                font=ctk.CTkFont(size=11),
                text_color=("gray50", "gray50"),
                wraplength=200
            )
            desc_label.pack(pady=(0, 10), padx=10)
            
            # Bot√£o gerar
            generate_btn = ctk.CTkButton(
                card,
                text="üìÑ Gerar Relat√≥rio",
                command=report["action"],
                height=35
            )
            generate_btn.pack(pady=(0, 15), padx=15, fill="x")
    
    def create_recent_reports_section(self):
        """Cria a se√ß√£o de relat√≥rios recentes"""
        section_frame, content_frame = self.create_section("üìã Relat√≥rios Recentes")
        
        # Frame da tabela
        table_frame = ctk.CTkFrame(content_frame)
        table_frame.pack(fill="both", expand=True)
        
        # Cabe√ßalho da tabela
        header_frame = ctk.CTkFrame(table_frame, fg_color=("gray80", "gray30"))
        header_frame.pack(fill="x", padx=10, pady=(10, 0))
        header_frame.grid_columnconfigure((0, 1, 2, 3, 4), weight=1)
        
        headers = ["Data/Hora", "Tipo", "Usu√°rio", "Status", "A√ß√µes"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(header_frame, text=header, font=ctk.CTkFont(weight="bold"))
            label.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
        
        # Dados mock
        mock_data = [
            ("22/09/2025 10:15", "Estoque Atual", "Admin", "Conclu√≠do", "stock_001"),
            ("21/09/2025 16:30", "Movimenta√ß√µes", "Jo√£o Silva", "Conclu√≠do", "mov_002"),
            ("21/09/2025 14:45", "Estoque Baixo", "Maria Santos", "Conclu√≠do", "low_003"),
            ("20/09/2025 09:20", "Transfer√™ncias", "Admin", "Conclu√≠do", "trans_004"),
            ("19/09/2025 11:10", "Valor Estoque", "Pedro Costa", "Conclu√≠do", "value_005")
        ]
        
        # Linhas da tabela
        for i, (data, tipo, user, status, report_id) in enumerate(mock_data):
            row_frame = ctk.CTkFrame(table_frame, fg_color="transparent")
            row_frame.pack(fill="x", padx=10, pady=2)
            row_frame.grid_columnconfigure((0, 1, 2, 3, 4), weight=1)
            
            # C√©lulas
            cells = [data, tipo, user, status]
            for j, cell in enumerate(cells):
                color = "green" if cell == "Conclu√≠do" else None
                label = ctk.CTkLabel(row_frame, text=cell, text_color=color)
                label.grid(row=0, column=j, padx=10, pady=5, sticky="ew")
            
            # Bot√µes de a√ß√£o
            actions_frame = ctk.CTkFrame(row_frame, fg_color="transparent")
            actions_frame.grid(row=0, column=4, padx=10, pady=5, sticky="ew")
            
            download_btn = ctk.CTkButton(
                actions_frame, 
                text="üì•", 
                width=30, 
                height=25, 
                command=lambda r=report_id: self.download_report(r)
            )
            download_btn.pack(side="left", padx=2)
            
            view_btn = ctk.CTkButton(
                actions_frame, 
                text="üëÅÔ∏è", 
                width=30, 
                height=25, 
                command=lambda r=report_id: self.view_report(r)
            )
            view_btn.pack(side="left", padx=2)
            
            delete_btn = ctk.CTkButton(
                actions_frame, 
                text="üóëÔ∏è", 
                width=30, 
                height=25, 
                command=lambda r=report_id: self.delete_report(r)
            )
            delete_btn.pack(side="left", padx=2)
    
    def generate_stock_report(self):
        """Gera relat√≥rio de estoque atual"""
        print("Gerar relat√≥rio de estoque - TODO: Implementar")
    
    def generate_movements_report(self):
        """Gera relat√≥rio de movimenta√ß√µes"""
        print("Gerar relat√≥rio de movimenta√ß√µes - TODO: Implementar")
    
    def generate_transfers_report(self):
        """Gera relat√≥rio de transfer√™ncias"""
        print("Gerar relat√≥rio de transfer√™ncias - TODO: Implementar")
    
    def generate_low_stock_report(self):
        """Gera relat√≥rio de estoque baixo"""
        print("Gerar relat√≥rio de estoque baixo - TODO: Implementar")
    
    def generate_value_report(self):
        """Gera relat√≥rio de valor de estoque"""
        print("Gerar relat√≥rio de valor - TODO: Implementar")
    
    def generate_users_report(self):
        """Gera relat√≥rio de usu√°rios"""
        print("Gerar relat√≥rio de usu√°rios - TODO: Implementar")
    
    def download_report(self, report_id):
        """Baixa um relat√≥rio"""
        print(f"Baixar relat√≥rio {report_id} - TODO: Implementar")
    
    def view_report(self, report_id):
        """Visualiza um relat√≥rio"""
        print(f"Visualizar relat√≥rio {report_id} - TODO: Implementar")
    
    def delete_report(self, report_id):
        """Exclui um relat√≥rio"""
        print(f"Excluir relat√≥rio {report_id} - TODO: Implementar")
